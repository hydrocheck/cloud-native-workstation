# Domain for your workstation
domain: example.com
# Public images on Docker Hub
docker:
  registry: ndebuhr
  tag: v0.10.0
aws:
  efs: false
# Certbot details
certbot:
  # Valid types are "google", "aws", and "cloudflare"
  type: google
  email: admin@example.com
# Keycloak security
keycloak:
  # Change me!
  clientSecret: OkSR7DMXAXzIrZIoWyN8yh0sFkiYrfJd
  # Change me!
  cookieSecret: 2u2iS0FH7pPjOUUn
# Authentication for Code Server and Keycloak
authentication:
  username: workstation
  # Change me!
  password: M@inz!DE
# Network policies and OPA constraint templates
policies:
  enabled: true
# Components included in the workstation
components:
  keycloak:
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 2
        memory: 4Gi
    operator:
      resources:
        requests:
          cpu: 0
          memory: 0
        limits:
          cpu: 500m
          memory: 1Gi
    postgres:
      resources:
        requests:
          memory: 0
          cpu: 0
        limits:
          cpu: 2
          memory: 4Gi
  initializers:
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 125m
        memory: 256Mi
  oauth2Proxy:
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 1
        memory: 2Gi
  code:
    enabled: true
    # For accessing cloud resources over VPN, set ovpn=true and:
    # kubectl create secret generic client-ovpn --from-file=client.ovpn
    ovpn: false
    storage: 32Gi
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 4
        memory: 8Gi
    dind:
      image: docker
      tag: 19-dind
      storage: 16Gi
      resources:
        requests:
          cpu: 0
          memory: 0
        limits:
          cpu: 2
          memory: 4Gi
  pgweb:
    enabled: false
    # For accessing databases over VPN, set ovpn=true and:
    # kubectl create secret generic client-ovpn --from-file=client.ovpn
    ovpn: false
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 2
        memory: 8Gi
  selenium:
    enabled: false
    hub:
      image: selenium/hub:4.1
      resources:
        requests:
          cpu: 0
          memory: 0
        limits:
          cpu: 2
          memory: 4Gi
    chrome:
      image: selenium/node-chrome:4.1
      resources:
        requests:
          memory: 0
          cpu: 0
        limits:
          cpu: 2
          memory: 4Gi
  jupyter:
    enabled: false
    # For accessing cloud resources over VPN, set ovpn=true and:
    # kubectl create secret generic client-ovpn --from-file=client.ovpn
    ovpn: false
    storage: 32Gi
    gpu:
      enabled: false
      # If you are using the provided terraform provisioning, this value
      # should match the gcp_gpu variable value
      name: nvidia-tesla-t4
    resources:
      requests:
        cpu: 0
        memory: 0
        # nvidia.com/gpu: 1
      limits:
        cpu: 4
        memory: 8Gi
        # nvidia.com/gpu: 1
  certbot:
    enabled: true
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 125m
        memory: 256Mi
  landing:
    enabled: false
    image: gcr.io/google-samples/hello-app:2.0
    targetPort: 8080
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 1
        memory: 2Gi
  sonarqube:
    enabled: false
  guacamole:
    enabled: false
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 1
        memory: 4Gi
    guacd:
      resources:
        requests:
          cpu: 0
          memory: 0
        limits:
          cpu: 1
          memory: 4Gi
    postgres:
      storage: 16Gi
      resources:
        requests:
          cpu: 0
          memory: 0
        limits:
          cpu: 2
          memory: 4Gi
  kanboard:
    enabled: false
    image: kanboard/kanboard:v1.2.20
    storage: 128Gi
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 2
        memory: 8Gi
  prometheus:
    enabled: false
    storage: 16Gi
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 1
        memory: 2Gi
  grafana:
    enabled: false
    dashboards:
      prometheus:
        plugin:
        - dashboards/prometheus_stats.json
        - dashboards/prometheus_2_stats.json
        - dashboards/grafana_stats.json
        community:
        - 13332
    storage: 8Gi
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 1
        memory: 2Gi
# Ingress targets
access:
- name: code
- name: hugo
- name: pgweb
- name: selenium-hub
- name: selenium-chrome
- name: jupyter
- name: landing
- name: sonarqube
- name: guacamole
- name: prometheus
- name: grafana
- name: kanboard
# Defaults applied to most pods
podDefaults:
  automountServiceAccountToken: false
  serviceAccountName: workstation-default
# Additional component-specific configuration
redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    podLabels:
      app: redis-master
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 1
        memory: 2Gi
sonarqube:
  initContainers:
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 125m
        memory: 256Mi
  postgresql:
    resources:
      requests:
        cpu: "0"
        memory: "0"
      limits:
        cpu: "1"
        memory: "2Gi"
  resources:
    requests:
      cpu: 0
      memory: 0
    limits:
      cpu: 1
      memory: 2Gi